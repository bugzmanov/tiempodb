use crate::sql::ast::*;
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar;

match {
    r"(?i)select" => "SELECT",
    r"(?i)from" => "FROM",
    r"(?i) and " => " AND ",
    r"(?i)group by" => "GROUP BY",
    r"(?i)where" => "WHERE",
    r"(?i)order by" => "ORDER BY",
    r"(?i)desc" => "DESC",
    r"(?i)asc" => "ASC",
//    r"(?i)null" => "NULL",  // this will cause failures for fill(null)
    r"(?i)limit" => "LIMIT",
    r"(?i)slimit" => "SLIMIT",
    r"(?i)show" => "SHOW",
    r"(?i)tag values" => "TAG VALUES",
    r"(?i)tag keys" => "TAG KEYS",
    r"(?i)with key" => "WITH KEY",
    r"(?i)measurements" => "MEASUREMENTS",
} else {
    _
}

/// operators
EQ: &'input str = "=" => <>;
NEQ: &'input str = "<>" => <>;
GT: &'input str = ">" => <>;
GTE: &'input str = ">=" => <>;

LT: &'input str = "<" => <>;
LTE: &'input str = "<=" => <>;

LIKE: &'input str = "=~" => <>;
NOT_LIKE: &'input str = "!=~" => <>;

/// keywords
SELECT: &'input str = "SELECT" => <>;
FROM: &'input str = "FROM" => <>;
WHERE: &'input str = "WHERE" => <>;
GROUP_BY: &'input str = "GROUP BY" => <>;
LIMIT: &'input str = "LIMIT" => <>;
SLIMIT: &'input str = "SLIMIT" => <>;

pub Term: u32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

Num: u32 = <s:r"[0-9]+"> =>? u32::from_str(s)
    .map_err(|_| ParseError::User {
        error: "number is too big"
    });

/// seperators
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

And<T>: Vec<T> = {
    <mut v:(<T> " AND ")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    },

    "(" <mut v: And<T>> ")" " AND " <mut v2: And<T>> =>  {
        v.append(&mut v2);
        v
    },
    
    <e: T> " AND " "(" <mut v: And<T>> ")"  =>  {
        v.push(e);
        v
    },

    "(" <v: And<T>> ")" => v 
}

// statement parts
//todo: microseconds are not covered
Time: Time = {
    <n: Num> "ns" => Time::NanoSeconds(n as u64),
    <n: Num> "ms" => Time::MilliSeconds(n as u64),
    <n: Num> "s" => Time::Seconds(n as u64),
    <n: Num> "m" => Time::Minutes(n as u64),
    <n: Num> "h" => Time::Hours(n as u64),
    <n: Num> "d" => Time::Days(n as u64),
}

Identifier:String = {
    r"([a-zA-Z][a-zA-Z0-9\\.]*)|(time)" => <>.to_string(),
    r#""\w[\w.]*""# => <>.replace("\"",""),
    r#"'.+'"# => <>.replace("\'",""),

    //todo: this is inappropriate place
    "time" => "time".to_string(),
}


// fields
RegExpValue: &'input str = {
     r#"/[^/]*(?:\\.[^/]*)*/"# => <>
}

SelectionFunction: SelectionType = {
    "bottom" => SelectionType::Bottom,
    "first" => SelectionType::First,
    "last" => SelectionType::Last,
    "max" => SelectionType::Max,
    "min" => SelectionType::Min,
    "count" => SelectionType::Count,
    "distinct" => SelectionType::Distinct,
    "integral" => SelectionType::Integral,
    "mean" => SelectionType::Mean,
    "median" => SelectionType::Median,
    "mod" => SelectionType::Mod,
    "sum" => SelectionType::Sum,
    //todo percentile
    // r"" => SelectionType::,
    // r"" => SelectionType::,
}

Field: FieldProjection = {
    <func: SelectionFunction> "(" <id: Identifier> ")" => FieldProjection {
        field_name: id.to_string(),
        selection_type: func
    },

    <id: Identifier> => FieldProjection {
        selection_type: SelectionType::Identity,
        field_name: id.to_string()
    }
}

Fields = Comma<Field>;

// where

Comparison: ComparisonType = {
    EQ => ComparisonType::Eq,
    NEQ => ComparisonType::NotEq,
    GT => ComparisonType::Gt,
    GTE => ComparisonType::Gte,
    LT => ComparisonType::Lt,
    LTE => ComparisonType::Lte,
}

RegExpComparison: ComparisonType = {
    LIKE => ComparisonType::Like,
    NOT_LIKE => ComparisonType::NotLike,
}

ComparisonExpression: String = {
    <identifier: Identifier> => <>,
    "now()" => "now()".to_string(),
    "now()" "+" <t:Time> => format!("now() + {}", <>),
    "now()" "-" <t:Time> => format!("now() - {}", <>),
}

Condition: Condition = {
    <source: ComparisonExpression> <op: Comparison> <value: ComparisonExpression> => Condition {
        source: source,
        comparison: op,
        value: value
    },

    <source: Identifier> <op: RegExpComparison> <value: RegExpValue> => Condition {
        source: source,
        comparison: op,
        value: value.to_string()
    }
}

Conditions = And<Condition>;

WhereConditions: Vec<Condition> = {
    WHERE <conditions: Conditions> => conditions,
}

// Group By


Fill: Fill = {
    "fill" "(" "linear"  ")" => Fill::Linear,
    "fill" "(" "none"    ")" => Fill::None,
    "fill" "(" "null"     ")" => Fill::Null,
    "fill" "(" "previous" ")" => Fill::Previous,
}

GroupBy: GroupBy = {
    GROUP_BY "time" "(" <time: Time> ")" <fill: Fill?> => 
        GroupBy {
            by_time: Some(time),
            by_field: None,
            fill: fill.unwrap_or(Fill::None)
        },
    GROUP_BY "time" "(" <time: Time> ")" "," <field: Identifier> <fill: Fill?> => 
        GroupBy {
            by_time: Some(time),
            by_field: Some(field.to_string()),
            fill: fill.unwrap_or(Fill::None)
        },
    GROUP_BY <field: Identifier> <fill: Fill?> => 
        GroupBy {
            by_time: None,
            by_field: Some(field.to_string()),
            fill: fill.unwrap_or(Fill::None)
        },
}

// Order by

OrderBy: OrderDirection = {
    "ORDER BY time DESC" => OrderDirection::Desc,
    "ORDER BY time ASC" => OrderDirection::Asc,
}

// LIMIT, SLIMIT

Limit: (Option<u32>, Option<u32>) = {
    LIMIT <points_num: Num> => {
        (Some(points_num), None)
    },

    SLIMIT <points_num: Num> => {
        (None, Some(points_num))
    },

    LIMIT <limit: Num> SLIMIT <slimit: Num> => {
        (Some(limit), Some(slimit))
    },

    SLIMIT <slimit: Num> LIMIT <limit: Num> => {
        (Some(limit), Some(slimit))
    },

    ! => (None, None)
}


// expressions
pub SelectStatement: SelectQuery = {
    SELECT <fields: Fields> FROM <tablename: Identifier> <conditions: WhereConditions?> <group_by: GroupBy?> <order_by: OrderBy?> <limit: Limit> => SelectQuery {
      from: tablename.to_string(),
      fields: fields,
      group_by: group_by.unwrap_or_else(|| GroupBy::default()),
      where_constraints: conditions.unwrap_or_else(|| Vec::new()),
      order_by_time: order_by.unwrap_or_else(|| OrderDirection::Asc),
      limit: limit.0,
      slimit: limit.1
    }
}

pub ShowFieldKeysStatement: ShowFieldKeysQuery = {
    "SHOW" "FIELD" "KEYS" "FROM" <id: Identifier> => ShowFieldKeysQuery {
        from: id
    }
}

pub ShowTagKeysStatement: ShowTagKeysQuery = {
    "SHOW" "TAG KEYS" "FROM" <id: Identifier> <conditions: WhereConditions?> => ShowTagKeysQuery {
        from: id,
        where_constraints: conditions.unwrap_or_else(|| Vec::new()),
    }
}

pub ShowTagValuesStatement: ShowTagValuesQuery = {
    "SHOW" "TAG VALUES" "FROM" <id: Identifier> "WITH KEY" "=" <key_id: Identifier> <conditions: WhereConditions?> => ShowTagValuesQuery {
        from: id,
        key: key_id,
        where_constraints: conditions.unwrap_or_else(|| Vec::new()),
    }
}

pub ShowMeasurementsStatement: ShowMeasurementsQuery = {
    "SHOW" "MEASUREMENTS" <conditions: WhereConditions?> "LIMIT" <limit: Num> => ShowMeasurementsQuery {
        where_constraints: conditions.unwrap_or_else(|| Vec::new()),
        limit: limit,
    }
}

pub Query: Query = {
    <select: SelectStatement> => Query::Select(select), 
    <tag_keys: ShowTagKeysStatement> => Query::TagKeys(tag_keys),
    <tag_values: ShowTagValuesStatement> => Query::TagValues(tag_values),
    <field_keys: ShowFieldKeysStatement> => Query::FieldKeys(field_keys),
    <measurements: ShowMeasurementsStatement> => Query::Measurements(measurements),
}
